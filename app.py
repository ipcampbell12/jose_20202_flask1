import os 
import secrets

from flask import Flask
from flask_smorest import Api
from flask_jwt_extended import JWTManager

from db import db
import models 

#models need to have been imported so sqlalchemy can create our tables

#same as models.__init__
#can just say models because imports are in __init__

from resources.item import blp as ItemBlueprint
from resources.store import blp as StoreBlueprint
from resources.tag import blp as TagBlueprint
from resources.user import blp as UserBlueprint

#creates flask app
#allows you to run app
#makes endpoints available to client

#application factory pattern
#can call function whenever you need, includign for when you want to write tests for your flask app
#call the function istead of running the file to create a new flask app

#databse url argument in case you want to connect to a database
def create_app(db_url=None):
    app = Flask(__name__)

    #configuration variables
    app.config["PROPAGATE_EXCEPTIONS"] = True
    app.config["API_TITLE"] = "Stores REST API"
    app.config['API_VERSION'] = "v1"
    app.config['OPENAPI_VERSION'] = '3.0.3'
    app.config['OPENAPI_URL_PREFIX'] = '/'
    app.config["OPENAPI_SWAGGER_UI_PATH"] = "/swagger-ui"
    app.config["OPENAPI_SWAGGER_UI_URL"] = "https://cdn.jsdelivr.net/npm/swagger-ui-dist/"
    #if db_url exists, use that, otherwise, use the next one
    app.config['SQLALCHEMY_DATABASE_URI'] = db_url or os.getenv("DATABASE_URL","sqlite:///data.db")
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS']=False

    #initializes flask sqlalchemy extension
    db.init_app(app)

    api = Api(app)

    #secret key used for signing JWTs 
    #app can check secret key and verify that JWT was generated by THIS app
    #make sure user hasn't created their own jwt somewhere else

    #this would generate a new secret key every time
    # app.config["JWT_SECRET_KEY"] = secrets.SystemRandom().getrandbits(128)

    #get this by running function above in python terminal
    #usually deployed in an envrionment variable (gitignore)
    app.config["JWT_SECRET_KEY"] = "202818376306308343738149448109322603617"
    jwt = JWTManager(app)

    #run this function before first api request
    #only going to run if tables don't already exist
    @app.before_first_request
    def create_tables():
        db.create_all()

    api.register_blueprint(ItemBlueprint)
    api.register_blueprint(StoreBlueprint)
    api.register_blueprint(TagBlueprint)
    api.register_blueprint(UserBlueprint)

    return app


#DATABSE
#all database providers use connection string that contain information that allow the client to connect to the database (flask app is client)



